trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  artifactName: enigmatry-entry
  buildConfiguration: 'Release'
  projectNameAngularApp:
  projectNamePrefix: Enigmatry.Entry
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

# This determines the build number
name: $(MajorMinorVersion)$(Rev:.r)

# resources:
#   repositories:
#     - repository: templates
#       type: git
#       name: Enigmatry - Azure Pipelines Templates/enigmatry-azure-pipelines-templates

stages:
- stage: 'ci_build'
  displayName: 'Build the web application'
  jobs: 
  - job: build_prerequisites
    displayName: Get the prerequisites for the build
    steps:
    - bash: |
        HASH=$(git rev-parse --short $BUILD_SOURCEVERSION)
        VERSION=$BUILD_BUILDNUMBER-$HASH
      
        echo "Hash: $HASH. Setting build number to: $VERSION"
        echo '##vso[build.updatebuildnumber]'$VERSION
      displayName: 'Set Build number'

  - job: 'Build_Package'
    displayName: Build Package
    steps:
    - task: NuGetToolInstaller@1
      displayName: Install NuGet Tool

    - task: Cache@2
      displayName: 'NuGet Cache'
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
        restoreKeys: |
            nuget | "$(Agent.OS)"
            nuget
        path: $(NUGET_PACKAGES)
        cacheHitVar: 'NUGET_CACHE_RESTORED'

    - task: NuGetCommand@2
      displayName: Nuget Restore
      inputs:
        restoreSolution: '$(projectNamePrefix).sln'

    - task: VSBuild@1
      displayName: Build package
      inputs:
        solution: '$(projectNamePrefix).sln'
        msbuildArgs: '/p:DeployOnBuild=true;WebPublishMethod=Package;PackageAsSingleFile=true;SkipInvalidConfigurations=true;PackageLocation=$(Build.ArtifactStagingDirectory);Version=$(Build.BuildNumber);TreatWarningsAsErrors=true;WarningsNotAsErrors=CS0612;EnforceCodeStyleInBuild=true'
        # platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: 'test'
        projects: $(projectNamePrefix)**/*.Tests.csproj
        arguments: '--filter TestCategory=unit|TestCategory=smoke --configuration $(buildConfiguration) --no-build'
    
    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: ${{ parameters.artifactName }}-$(Build.BuildNumber)
        publishLocation: 'Container'

  # - template: build-report-job.yml@templates
  #   parameters:
  #     artifactName: $(artifactName)
  #     displayName: 'Generate Reports'
  #     projectNameAngularApp: $(projectNameAngularApp)
  #     projectNamePrefix: $(projectNamePrefix)

# steps:
# - task: DotNetCoreCLI@2
#   displayName: 'Build package'
#   inputs:
#     command: 'build'
#     projects: '$(ProjectNamePrefix).sln'
#     configuration: $(buildConfiguration)
#     arguments: /p:TreatWarningsAsErrors=true

# - task: DotNetCoreCLI@2
#   displayName: 'Run Unit tests'
#   inputs:
#     command: 'test'
#     projects: '$(ProjectNamePrefix)**/*.Tests.csproj'
#     arguments: '--filter TestCategory=unit|TestCategory=smoke /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
#     configuration: $(buildConfiguration)
#     buildProperties: 

# - task: PublishCodeCoverageResults@1
#   displayName: 'Publish code coverage report'
#   inputs:
#     codeCoverageTool: 'Cobertura'
#     summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

# - task: DotNetCoreCLI@2
#   displayName: 'Create NuGet Packages'
#   inputs:
#     command: 'pack'
#     packagesToPack: '$(ProjectNamePrefix).sln'
#     versioningScheme: 'byBuildNumber'
#     configuration: $(buildConfiguration)

# - task: DotNetCoreCLI@2
#   displayName: 'Push NuGet Packages'
#   inputs:
#     command: 'push'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
#     nuGetFeedType: 'internal'
#     publishVstsFeed: 'b10976dd-2e80-4940-82ff-0f27c8e76baa/d86fc1c0-d5ab-4b0a-8b57-5dc7dd5a60cb'