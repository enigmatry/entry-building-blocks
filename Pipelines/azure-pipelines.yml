trigger:
- '*'

pool:
  vmImage: ubuntu-latest

variables:
  artifactName: enigmatry-entry-building-blocks
  buildConfiguration: 'Release'
  projectNamePrefix: Enigmatry.Entry
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

resources:
  repositories:
    - repository: templates
      type: git
      name: Enigmatry - Azure Pipelines Templates/enigmatry-azure-pipelines-templates

stages:
- stage: 'ci_build'
  displayName: 'Build the packages'
  jobs: 
  - job: build_prerequisites
    displayName: Get the version for the build
    steps:
    - checkout: self
      fetchDepth: 0
    - task: DotNetCoreCLI@2
      displayName: Add Manifest for tool installation
      inputs:
        command: 'custom'
        custom: 'new '
        arguments: tool-manifest
    - task: DotNetCoreCLI@2
      displayName: Install minver
      inputs:
        command: 'custom'
        custom: 'tool '
        arguments: install minver-cli
    - task: PowerShell@2
      displayName: 'Set MinVer Version'
      inputs:
        targetType: inline
        script: |
          $version = dotnet minver -p preview
          echo "##vso[build.updatebuildnumber]$version"
          Write-Host "Setting MinVer to '$version'"

  - job: 'Build_Package'
    displayName: Build Package
    dependsOn: build_prerequisites
    steps:
    - task: NuGetToolInstaller@1
      displayName: Install NuGet Tool
    - task: Cache@2
      displayName: 'NuGet Cache'
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
        restoreKeys: |
            nuget | "$(Agent.OS)"
            nuget
        path: $(NUGET_PACKAGES)
        cacheHitVar: 'NUGET_CACHE_RESTORED'
    - task: NuGetCommand@2
      displayName: Nuget Restore
      inputs:
        restoreSolution: '$(projectNamePrefix).sln'
    - task: DotNetCoreCLI@2
      displayName: 'Build package'
      inputs:
        command: 'build'
        projects: '$(projectNamePrefix).sln'
        configuration: $(buildConfiguration)
    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: 'test'
        projects: $(projectNamePrefix)**/*.Tests.csproj
        arguments: '--filter TestCategory=unit|TestCategory=smoke --configuration $(buildConfiguration)'
        nobuild: true
    - task: DotNetCoreCLI@2
      displayName: Pack the NuGet packages
      inputs:
        command: 'pack'
        packagesToPack: '**/*.csproj'
        configuration: '$(buildConfiguration)'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'BUILD_BUILDNUMBER'
    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: $(artifactName)-$(Build.BuildNumber)
        publishLocation: 'Container'

- stage: publish_nuget
  displayName: publish packages to NuGet
  dependsOn: ci_build
  # TODO BP-637: Uncomment this condition before the merge to master
  ## condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), contains(variables['Build.SourceBranch'], 'BP-637')))
  jobs:
  - deployment: Publish
    environment: Publish to NuGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              downloadPath: '$(System.ArtifactsDirectory)'
          - task: NuGetCommand@2
            inputs:
              command: 'push'
              packagesToPush: '$(System.ArtifactsDirectory)/**/*.nupkg;!$(System.ArtifactsDirectory)/**/*.symbols.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'nuget_org'